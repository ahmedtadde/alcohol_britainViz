)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T
)
}else{
table %>% plot_ly(
x = ~Year,
y = ~ProportionChange,
type = "scatter",
mode = "lines",
color = ~Gender,
colors = c("#008080","#708090","#B8860B"),
hoverinfo ="text",
# showlegend = TRUE
text =~paste0(
'<br>', question,
'<br>', 'Gender: ', Gender,
'<br>', 'Change: ', ProportionChange,"%",
'<br>', 'Year: ', Year
)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T,
legend = list(orientation = 'h')
)
}
}
FetchLinePlots <- function(df){
#takes in a dataframe
#returns a nested list of plots... by Age Range, then by Question
age.ranges <- unique(df$AgeRange)
questions <- unique(df$Question)
foreach(i=1:length(age.ranges)) %do%{
return(
foreach(j=1:length(questions)) %do%{
return(MakeLinePlot(df, age.ranges[i], questions[j], j))
}
)
} -> all.plots
names(all.plots) <- age.ranges
return(all.plots)
}
data <- fread('data.csv')
glimpse(data)
####===== Reformating columns
data[, Year:= ReformatYear(Year)]
data[, Gender := ReformatGender(Gender)]
data[, Proportion := ReformatProportion(Proportion)]
data[, Question := ReformatQuestion(Question)]
####===== Change Age Range => AgeRange AND REFORMAT
setnames(data, "Age Range", "AgeRange")
data[, AgeRange := ReformatAgeRange(AgeRange)]
####===== Create PoportionChange variable
data[, ProportionChange := round(c(0,diff(Proportion)),2), by = c("Question", "AgeRange","Gender")]
####===== Bar Plots By Question showing proportion difference for 2005 & 2016
MakeBarPlot(data)
####===== Reformating columns
data[, Year:= ReformatYear(Year)]
data[, Gender := ReformatGender(Gender)]
data[, Proportion := ReformatProportion(Proportion)]
data[, Question := ReformatQuestion(Question)]
####===== Change Age Range => AgeRange AND REFORMAT
setnames(data, "Age Range", "AgeRange")
knitr::opts_chunk$set(echo = TRUE)
##=====  Loading Libraries for Processing
# load pacman first; then from pacman, use p_load to load other libraries
# This is so that p_load can automatically install the package if it's not
# already installed => efficient fulfillment of package requirements!
library(pacman)
p_load(data.table)
p_load(foreach)
p_load(plotly)
p_load(dplyr)
p_load(stringi)
##===== Functions for Data Wrangling
ReformatYear <- function(values){
#takes in vector of Year values (char type)
#removes all occurences of ","
#returns modified vector of Year values (char type)
foreach(i=1:length(values), .combine = c) %do%{
values[i] <- as.character(gsub(",","", values[i]))
}
}
ReformatGender <- function(values){
#takes in vector of Gender values (char type)
#changes all occurences of "All persons" => 'All'
#returns modified vector of Gender values (char type)
values <- stri_trim_both(as.character(values))
old <- 'All persons'
new <- 'All'
values[which(values %in% old)] <- new
values
}
ReformatAgeRange <- function(values){
#takes in vector of AgeRange  values (char type)
#changes all occurences of "All 16+" => '16+'
#returns modified vector of AgeRange values (char type)
values <- stri_trim_both(as.character(values))
old <- 'All 16+'
new <- '16+'
values[which(values %in% old)] <- new
values
}
ReformatProportion <- function(values){
#takes in vector of Proportion values (numeric type)
#removes all occurences of "%"
#returns modified vector of Proportion values (numeric type)
foreach(i=1:length(values), .combine = c) %do%{
values[i] <- as.numeric(gsub("%","", values[i]))
}
}
ReformatQuestion <- function(values){
#takes in vector of Question values (char type)
#Changes:
#'Drank alcohol in the last week' => 'Drank alcohol'
#'Drank alcohol on five on more days in the last week' => ''Drank alcohol on 5+ days'
#returns modified vector of Question values (char type)
old <- 'Drank alcohol on five on more days in the last week'
new <- 'Drank alcohol on 5+ days'
values[which(values %in% old)] <- new
old <- 'Drank alcohol in the last week'
new <- 'Drank alcohol'
values[which(values %in% old)] <- new
values
}
MakeBarPlot <- function(df){
#takes in a dataframe, all columns included
#returns bar plots: Question vs Porportion BY 2005,2016
df[
Year %in% c(2005,2016) & AgeRange == '16+' & Gender == 'All',
.(Year, Question, Proportion)
][,
Change := c(NA,diff(Proportion)), by= 'Question'
] -> table
use.font <- list(
family = "Courier New, monospace",
size = 15,
color = "black"
)
ax <- list(
title = "",
showticklabels = TRUE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE,
tickfont = use.font
)
ay <- list(
title = '',
titlefont = use.font,
showticklabels = FALSE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE
)
plot_ly(
type = 'bar',
table,
x = ~Question,
y = ~Proportion,
color = ~Year, colors = c("#66757F","#32AB9F"),
hoverinfo = 'text',
text = ~paste0(
"<br>",'Proportion: ', Proportion,'%'
)
)%>%layout(
title="Alcohol Consumption Drops in Britain", titlefont = use.font, xaxis=ax, yaxis=ay ,
annotations = list(
x = ~Question,
y = ~Proportion+10,
text = c('', '-7.3%', '', '-7.2%', '', '+2%'),
xanchor = 'center',
yanchor = 'bottom',
showarrow = FALSE
),
legend = list(x = 0.6, y = 0.7, orientation = 'h')
)
}
MakeLinePlot <- function(df, age.range, question, counter){
#takes in a dataframe,
#returns a series plot: ProportionChange vs Year
table <- df[AgeRange %in% age.range & Question %in% question]
use.font <- list(
family = "Courier New, monospace",
size = 15,
color = "black"
)
ax <- list(
title = "",
showticklabels = TRUE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE,
tickfont = use.font
)
ay <- list(
title = question,
titlefont = use.font,
showticklabels = FALSE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE
)
if (counter != 3){
table %>% plot_ly(
x = ~Year,
y = ~ProportionChange,
type = "scatter",
mode = "lines",
color = ~Gender,
colors = c("#008080","#708090","#B8860B"),
hoverinfo ="text",
showlegend = FALSE,
text =~paste0(
'<br>', question,
'<br>', 'Gender: ', Gender,
'<br>', 'Change: ', ProportionChange,"%",
'<br>', 'Year: ', Year
)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T
)
}else{
table %>% plot_ly(
x = ~Year,
y = ~ProportionChange,
type = "scatter",
mode = "lines",
color = ~Gender,
colors = c("#008080","#708090","#B8860B"),
hoverinfo ="text",
# showlegend = TRUE
text =~paste0(
'<br>', question,
'<br>', 'Gender: ', Gender,
'<br>', 'Change: ', ProportionChange,"%",
'<br>', 'Year: ', Year
)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T,
legend = list(orientation = 'h')
)
}
}
FetchLinePlots <- function(df){
#takes in a dataframe
#returns a nested list of plots... by Age Range, then by Question
age.ranges <- unique(df$AgeRange)
questions <- unique(df$Question)
foreach(i=1:length(age.ranges)) %do%{
return(
foreach(j=1:length(questions)) %do%{
return(MakeLinePlot(df, age.ranges[i], questions[j], j))
}
)
} -> all.plots
names(all.plots) <- age.ranges
return(all.plots)
}
data <- fread('data.csv')
glimpse(data)
####===== Reformating columns
data[, Year:= ReformatYear(Year)]
data[, Gender := ReformatGender(Gender)]
data[, Proportion := ReformatProportion(Proportion)]
data[, Question := ReformatQuestion(Question)]
####===== Change Age Range => AgeRange AND REFORMAT
setnames(data, "Age Range", "AgeRange")
data[, AgeRange := ReformatAgeRange(AgeRange)]
####===== Create PoportionChange variable
data[, ProportionChange := round(c(0,diff(Proportion)),2), by = c("Question", "AgeRange","Gender")]
####===== Bar Plots By Question showing proportion difference for 2005 & 2016
MakeBarPlot(data)
knitr::opts_chunk$set(echo = TRUE)
##=====  Loading Libraries for Processing
# load pacman first; then from pacman, use p_load to load other libraries
# This is so that p_load can automatically install the package if it's not
# already installed => efficient fulfillment of package requirements!
library(pacman)
p_load(data.table)
p_load(foreach)
p_load(plotly)
p_load(dplyr)
p_load(stringi)
##===== Functions for Data Wrangling
ReformatYear <- function(values){
#takes in vector of Year values (char type)
#removes all occurences of ","
#returns modified vector of Year values (char type)
foreach(i=1:length(values), .combine = c) %do%{
values[i] <- as.character(gsub(",","", values[i]))
}
}
ReformatGender <- function(values){
#takes in vector of Gender values (char type)
#changes all occurences of "All persons" => 'All'
#returns modified vector of Gender values (char type)
values <- stri_trim_both(as.character(values))
old <- 'All persons'
new <- 'All'
values[which(values %in% old)] <- new
values
}
ReformatAgeRange <- function(values){
#takes in vector of AgeRange  values (char type)
#changes all occurences of "All 16+" => '16+'
#returns modified vector of AgeRange values (char type)
values <- stri_trim_both(as.character(values))
old <- 'All 16+'
new <- '16+'
values[which(values %in% old)] <- new
values
}
ReformatProportion <- function(values){
#takes in vector of Proportion values (numeric type)
#removes all occurences of "%"
#returns modified vector of Proportion values (numeric type)
foreach(i=1:length(values), .combine = c) %do%{
values[i] <- as.numeric(gsub("%","", values[i]))
}
}
ReformatQuestion <- function(values){
#takes in vector of Question values (char type)
#Changes:
#'Drank alcohol in the last week' => 'Drank alcohol'
#'Drank alcohol on five on more days in the last week' => ''Drank alcohol on 5+ days'
#returns modified vector of Question values (char type)
old <- 'Drank alcohol on five on more days in the last week'
new <- 'Drank alcohol on 5+ days'
values[which(values %in% old)] <- new
old <- 'Drank alcohol in the last week'
new <- 'Drank alcohol'
values[which(values %in% old)] <- new
values
}
MakeBarPlot <- function(df){
#takes in a dataframe, all columns included
#returns bar plots: Question vs Porportion BY 2005,2016
df[
Year %in% c(2005,2016) & AgeRange == '16+' & Gender == 'All',
.(Year, Question, Proportion)
][,
Change := c(NA,diff(Proportion)), by= 'Question'
] -> table
use.font <- list(
family = "Courier New, monospace",
size = 15,
color = "black"
)
ax <- list(
title = "",
showticklabels = TRUE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE,
tickfont = use.font
)
ay <- list(
title = '',
titlefont = use.font,
showticklabels = FALSE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE
)
plot_ly(
type = 'bar',
table,
x = ~Question,
y = ~Proportion,
color = ~Year, colors = c("#66757F","#32AB9F"),
hoverinfo = 'text',
text = ~paste0(
"<br>",'Proportion: ', Proportion,'%'
)
)%>%layout(
title="Alcohol Consumption Drops in Britain", titlefont = use.font, xaxis=ax, yaxis=ay ,
annotations = list(
x = ~Question,
y = ~Proportion+10,
text = c('', '-7.3%', '', '-7.2%', '', '+2%'),
xanchor = 'center',
yanchor = 'bottom',
showarrow = FALSE
),
legend = list(x = 0.6, y = 0.7, orientation = 'h')
)
}
MakeLinePlot <- function(df, age.range, question, counter){
#takes in a dataframe,
#returns a series plot: ProportionChange vs Year
table <- df[AgeRange %in% age.range & Question %in% question]
use.font <- list(
family = "Courier New, monospace",
size = 15,
color = "black"
)
ax <- list(
title = "",
showticklabels = TRUE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE,
tickfont = use.font
)
ay <- list(
title = question,
titlefont = use.font,
showticklabels = FALSE,
zeroline = FALSE,
showline = FALSE,
showgrid = FALSE
)
if (counter != 3){
table %>% plot_ly(
x = ~Year,
y = ~ProportionChange,
type = "scatter",
mode = "lines",
color = ~Gender,
colors = c("#008080","#708090","#B8860B"),
hoverinfo ="text",
showlegend = FALSE,
text =~paste0(
'<br>', question,
'<br>', 'Gender: ', Gender,
'<br>', 'Change: ', ProportionChange,"%",
'<br>', 'Year: ', Year
)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T
)
}else{
table %>% plot_ly(
x = ~Year,
y = ~ProportionChange,
type = "scatter",
mode = "lines",
color = ~Gender,
colors = c("#008080","#708090","#B8860B"),
hoverinfo ="text",
# showlegend = TRUE
text =~paste0(
'<br>', question,
'<br>', 'Gender: ', Gender,
'<br>', 'Change: ', ProportionChange,"%",
'<br>', 'Year: ', Year
)
)%>%
layout(
title = age.range,
titlefont = use.font ,
xaxis = ax,
yaxis = ay,
autosize = T,
legend = list(orientation = 'h')
)
}
}
FetchLinePlots <- function(df){
#takes in a dataframe
#returns a nested list of plots... by Age Range, then by Question
age.ranges <- unique(df$AgeRange)
questions <- unique(df$Question)
foreach(i=1:length(age.ranges)) %do%{
return(
foreach(j=1:length(questions)) %do%{
return(MakeLinePlot(df, age.ranges[i], questions[j], j))
}
)
} -> all.plots
names(all.plots) <- age.ranges
return(all.plots)
}
data <- fread('data.csv')
glimpse(data)
####===== Reformating columns
data[, Year:= ReformatYear(Year)]
data[, Gender := ReformatGender(Gender)]
data[, Proportion := ReformatProportion(Proportion)]
data[, Question := ReformatQuestion(Question)]
####===== Change Age Range => AgeRange AND REFORMAT
setnames(data, "Age Range", "AgeRange")
data[, AgeRange := ReformatAgeRange(AgeRange)]
####===== Create PoportionChange variable
data[, ProportionChange := round(c(0,diff(Proportion)),2), by = c("Question", "AgeRange","Gender")]
####===== Bar Plots By Question showing proportion difference for 2005 & 2016
MakeBarPlot(data)
